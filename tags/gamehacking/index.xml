<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gamehacking on BananaMafia</title>
    <link>https://bananamafia.dev/tags/gamehacking/</link>
    <description>Recent content in gamehacking on BananaMafia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://bananamafia.dev/tags/gamehacking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Awesome Talks</title>
      <link>https://bananamafia.dev/project/talks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/talks/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Game Hacking #4: Hacking Walls and Particles</title>
      <link>https://bananamafia.dev/post/cs-aimbot-wallhax/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/cs-aimbot-wallhax/</guid>
      <description>Hello fellow Wallhackers, NoSmokers and Copy-Pasters. Today, I&amp;rsquo;ll write about implementing several cool cheat features for your favorite game, CS:GO. There may be many articles like this, but this one is mine :)
First, of all I recommend checking out my previous posts covering several aspects and internals of CS:GO before reading this. I&amp;rsquo;ve got posts about Aimbots and NoFlash, as well as Direct3D hooks that will serve as a basis for this post.</description>
    </item>
    
    <item>
      <title>Cheating in Unity Games Because Why Not?</title>
      <link>https://bananamafia.dev/post/frida-unity/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/frida-unity/</guid>
      <description>Yo!
Do you know the game Among Us ? It&amp;rsquo;s a multiplayer game where you have to identify impostors in a group of players. The impostor&amp;rsquo;s goal is to kill every other player without being identified throughout the game. The remaining players can use votes to kick out a specific player, while hopefully identifying the impostor correctly.
The game is based on the Unity engine and, along with other platforms, it is available for Android devices.</description>
    </item>
    
    <item>
      <title>Game Hacking #3: Hooking Direct3D EndScene()</title>
      <link>https://bananamafia.dev/post/d3dhook/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/d3dhook/</guid>
      <description>I&amp;rsquo;ve experimented with even moar game hacking and hooking techniques and you didn&amp;rsquo;t, so here comes another blog post.
Today&amp;rsquo;s topic is about hooking a specific function of the Direct3D library with the goal to cause Counter Strike: Global Offensive to draw additional things on the screen. There can be various reasons to do this:
It&amp;rsquo;s possible to draw a crosshair on the screen when none is shown by the game.</description>
    </item>
    
    <item>
      <title>Game Hacking #2: Coding A CS:GO Hack</title>
      <link>https://bananamafia.dev/post/bananabot/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/bananabot/</guid>
      <description>This post covers creating a hack for the game Counter Strike: Global Offensive. The hack I&amp;rsquo;ve developed works in combination with the Linux version of the game - coding a windows-based hack can however be done with the same methodology and tools.
These are the features I&amp;rsquo;ve integrated into the hack:
Bunnyhop Bot: Do jumps as soon as the player hits the ground to make it easier to perform bunny hop chains No Flash: Be immune to flash grenades that would block the players vision Aimbot: Automatically aim at the head of the nearest enemy Tooling &amp;amp; Setup Linux lacks of good tools to perform the kind of analysis tasks required to code a cheat like this.</description>
    </item>
    
    <item>
      <title>Game Hacking #1: Developing Hacks for idTech3 Based Games</title>
      <link>https://bananamafia.dev/post/multihack/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/multihack/</guid>
      <description>The idTech3 game engine is most known for being used in games like Quake III Arena, Wolfenstein: ET and Star Wars: Jedi Knight - Jedi Academy. Sometimes people just simply refer to this engine as the Quake3 engine. This post teaches you how to create hacks for games that are based on this game engine. The target of choice is the game Jedi Academy, which was released in 2003. Oldschool, I know - but most of the injection and hooking techniques can also be applied to modern games.</description>
    </item>
    
    <item>
      <title>Runtime Function Patching</title>
      <link>https://bananamafia.dev/post/cvar-hax/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/cvar-hax/</guid>
      <description>When it comes to patching certain functions of a binary on ASM level, it&amp;rsquo;s often performed by modifying the binary itself. This post shows a different approach to accomplish the same thing: Removing game cheat protections using runtime function patching.
The Target This is being shown in the following context: Quake3 based multiplayer games include certain settings (CVars) which are disabled for players to prevent cheating. These settings would enable clients to disable fog and shadows and use different camera angles.</description>
    </item>
    
  </channel>
</rss>
