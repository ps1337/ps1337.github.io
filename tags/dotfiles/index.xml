<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotfiles on BananaMafia</title>
    <link>https://bananamafia.dev/tags/dotfiles/</link>
    <description>Recent content in dotfiles on BananaMafia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://bananamafia.dev/tags/dotfiles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How I Over-Engineered My Dotfiles</title>
      <link>https://bananamafia.dev/post/dotfiles/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/dotfiles/</guid>
      <description>You want to customize your Linux dotfiles, whether you already know it or not. After investing way too much time into this, I&amp;rsquo;ve decided to share some results and tricks in this blog post.
General Structure The first thing to do is to create a general structure for your dotfiles and all associated files and scripts. I came up with this structure:
dotfiles ├── aliases ├── bashrc ├── bindings: Additional key bindings ├── exports: Shell-wide exports ├── i3: Config and bar for i3 window manager │ ├── config │ ├── polybar │ └── scripts ├── Makefile: Generate readme and call shellcheck on push [.</description>
    </item>
    
    <item>
      <title>Automated and Tested Dotfile Deployment Using Ansible and Docker</title>
      <link>https://bananamafia.dev/post/dotfile-deployment/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/dotfile-deployment/</guid>
      <description>This is the second part of my posts about Dotfile management. Part one can be found here.
After spending a lot of time and effort on your Dotfiles, it may be useful to setup an automated deployment process. There are existing solutions like GNU Stow, but for maximum flexibility the use of Ansible may be a better option. Using this, files and advanced configuration hierarchies can be distributed easily. This post covers my personal setup, which also includes an automated deployment test approach for multiple linux distributions.</description>
    </item>
    
    <item>
      <title>Using Shellcheck and Docker to Automatically Lint Dotfiles</title>
      <link>https://bananamafia.dev/post/dotfile-shellcheck/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/dotfile-shellcheck/</guid>
      <description>In order to prevent errors and side effects, it&amp;rsquo;s useful to use Shellcheck to lint all shell scripts. While checking out the Dotfiles of jessfraz, I came across an easy way to integrate this kind of check with Travis CI. The mentioned approach triggers a travis linting process after pushing to to the Dotfiles repository on GitHub. This post will explain all necessary steps to integrate this process into your own repository.</description>
    </item>
    
  </channel>
</rss>
