<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reverse-engineering on BananaMafia</title>
    <link>https://bananamafia.dev/tags/reverse-engineering/</link>
    <description>Recent content in reverse-engineering on BananaMafia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://bananamafia.dev/tags/reverse-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automotive Security Research</title>
      <link>https://bananamafia.dev/project/autosec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/autosec/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Awesome Talks</title>
      <link>https://bananamafia.dev/project/talks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/talks/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Bananabot: CS:GO Multihack</title>
      <link>https://bananamafia.dev/project/bananabot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/bananabot/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CANalyzat0r</title>
      <link>https://bananamafia.dev/project/canalyzat0r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/canalyzat0r/</guid>
      <description>Please find CANalyzat0r here on GitHub :) </description>
    </item>
    
    <item>
      <title>Official Cutter Docker Configuration</title>
      <link>https://bananamafia.dev/project/cutter-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/cutter-docker/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Q3 Engine Multihack</title>
      <link>https://bananamafia.dev/project/jka-multihack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/jka-multihack/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ShhPlunk: Muting the Splunk Forwarder</title>
      <link>https://bananamafia.dev/post/shhplunk/</link>
      <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/shhplunk/</guid>
      <description>Many organizations rely on Splunk and its Splunk Forwarder to deliver event data as a sole source of telemetry. For quite some time, I&amp;rsquo;ve wondered if it&amp;rsquo;s possible to mute the Splunk Forwarder&amp;rsquo;s splunkd process, so that no event data reaches the respective endpoint. Technically, this should be possible, once the required privileges are granted on a system. Therefore, I&amp;rsquo;ve decided to take a look at this. While Splunk Forwarder is available for various platforms, I&amp;rsquo;ve targeted the Linux version.</description>
    </item>
    
    <item>
      <title>Game Hacking #5: Hacking Walls and Particles</title>
      <link>https://bananamafia.dev/post/cs-aimbot-wallhax/</link>
      <pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/cs-aimbot-wallhax/</guid>
      <description>Hello fellow Wallhackers, NoSmokers and Copy-Pasters. Today, I&amp;rsquo;ll write about implementing several cool cheat features for your favorite game, CS:GO. There may be many articles like this, but this one is mine :)
First, of all I recommend checking out my previous posts covering several aspects and internals of CS:GO before reading this. I&amp;rsquo;ve got posts about Aimbots and NoFlash, as well as Direct3D hooks that will serve as a basis for this post.</description>
    </item>
    
    <item>
      <title>Analysis of Satisfyer Toys: Discovering an Authentication Bypass with r2 and Frida</title>
      <link>https://bananamafia.dev/post/satisfyer/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/satisfyer/</guid>
      <description>There&amp;rsquo;s no good way to start a blog post like this, so let&amp;rsquo;s dive right in:
Recently, I&amp;rsquo;ve re-discovered the butthax talk which covered security aspects of Lovense devices. I&amp;rsquo;ve felt so inspired, that I&amp;rsquo;ve decided to buy some Satisfyer devices and check out how they work.
These are app-controllable toys that are sold globally, first and foremost in Germany and all over the EU. They have some pretty interesting functionality:</description>
    </item>
    
    <item>
      <title>Haxxoring a Hisense Smart TV</title>
      <link>https://bananamafia.dev/post/hisensehax/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/hisensehax/</guid>
      <description>Instead of watching The Bachelor, I&amp;rsquo;ve decided to take a look at the security of my Hisense smart TV. I&amp;rsquo;ve found a way to read arbitrary files from the file system. Also, (over)writing specific files, as well as installing malicious HTML5 applications was found to be possible. All of that can be performed from the web browser, using the custom JavaScript API that was implemented by the vendor.
You can find some PoCs at the end of this blog post.</description>
    </item>
    
    <item>
      <title>Game Hacking #3: Hooking Direct3D EndScene()</title>
      <link>https://bananamafia.dev/post/d3dhook/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/d3dhook/</guid>
      <description>I&amp;rsquo;ve experimented with even moar game hacking and hooking techniques and you didn&amp;rsquo;t, so here comes another blog post.
Today&amp;rsquo;s topic is about hooking a specific function of the Direct3D library with the goal to cause Counter Strike: Global Offensive to draw additional things on the screen. There can be various reasons to do this:
It&amp;rsquo;s possible to draw a crosshair on the screen when none is shown by the game.</description>
    </item>
    
    <item>
      <title>In-Process Fuzzing With Frida</title>
      <link>https://bananamafia.dev/post/frida-fuzz/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/frida-fuzz/</guid>
      <description>In a previous post I&amp;rsquo;ve already covered Frida and its instrumentation abilities. But check this out: You can also use Frida to perform fuzzing. What&amp;rsquo;s even greater is that Frida allows in-process fuzzing.
Why would you want to do this? There may be various reasons, but the most outstanding one for me is building a fuzzing harness for closed source applications and libraries. Just take Counter Strike GO as an example:</description>
    </item>
    
    <item>
      <title>Dynamic Instrumentation: Frida And r2frida For Noobs</title>
      <link>https://bananamafia.dev/post/r2frida-1/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/r2frida-1/</guid>
      <description>One of my main takeaways from this year&amp;rsquo;s r2con is that Frida is cool and that r2frida, the integration with radare2, is even cooler. Using this, it&amp;rsquo;s possible to pair the benefits of dynamic instrumentation of Frida with the analysis features and workflow of radare2. This is a small tutorial to get started with both Frida and r2frida that&amp;rsquo;s based on the r2xor challenge of the recent r2con CTF. Please note that this is not a complete writeup for r2xor.</description>
    </item>
    
    <item>
      <title>r2con 2019 CTF Writeups</title>
      <link>https://bananamafia.dev/post/r2ctf-2019/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/r2ctf-2019/</guid>
      <description>r2boy1 The first GameBoy challenge was rather easy. The idea was to talk to the Pancake character in-game in order to get the flag. The problem is that Pancake chills behind a wall. One possible solution was to glitch through the wall, however I&amp;rsquo;ve solved this using static analysis.
Going through the strings and searching for a possible dialog yields interesting strings:
[0x00054075]&amp;gt; izzq~pancake 0x54016 37 36 Find pancake\nthrough a game\nglitch!</description>
    </item>
    
    <item>
      <title>Reversing .NET Applications: CCCamp19 CTF CampRE Challenge</title>
      <link>https://bananamafia.dev/post/dotnet-re-cccamp19/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/dotnet-re-cccamp19/</guid>
      <description>Finally a nice .NET CTF challenge - time to pull out dnSpy :)
The provided ZIP includes a CampRE.dll file which, according to the challenge description, is a .NET Core application. Time to boot a Windows VM and install the .NET Core runtime environment.
After decompiling the dll, this source code can be inspected:
private static void Main(string[] args) { byte[] sourceArray = File.ReadAllBytes(Assembly.GetAssembly(typeof(Program)).Location); for (int i = 0; i &amp;lt; 1333337; i++) { MD5 md = MD5.</description>
    </item>
    
    <item>
      <title>ROP It Like It&#39;s Hot: ROP Basics - Stack Pivoting</title>
      <link>https://bananamafia.dev/post/binary-rop-stackpivot/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/binary-rop-stackpivot/</guid>
      <description>Let&amp;rsquo;s check out Return Oriented Programming (ROP) with the pivot32 challenge from ROP Emporium by using radare2. The pivot32 binary is compiled without stack canaries and PIE but has NX enabled.
Basics The general principle behind ROP is that:
[&amp;hellip;] an attacker gains control of the call stack to hijack program control flow and then executes carefully chosen machine instruction sequences that are already present in the machine&amp;rsquo;s memory, called &amp;ldquo;gadgets&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>r2con 2019 PwnDebian Challenge: Exploiting radare2 (CVE-2019-14745, CVE-2019-16718)</title>
      <link>https://bananamafia.dev/post/r2-pwndebian/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/r2-pwndebian/</guid>
      <description>Hello hello!
Everyone knows: This years r2con, the conference about radare2, has a very special challenge &amp;ndash; PwnDebian:
The almighty blenk92 and me decided to assist the radare2 project in finding such an exploit an we think we were quite successful :)
But first some basics for r2.
Shelling Out Via The r2 Shell While running r2, it&amp;rsquo;s possible to shell out and execute shell commands without leaving the r2 console:</description>
    </item>
    
    <item>
      <title>Game Hacking #2: Coding A CS:GO Hack</title>
      <link>https://bananamafia.dev/post/bananabot/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/bananabot/</guid>
      <description>This post covers creating a hack for the game Counter Strike: Global Offensive. The hack I&amp;rsquo;ve developed works in combination with the Linux version of the game - coding a windows-based hack can however be done with the same methodology and tools.
These are the features I&amp;rsquo;ve integrated into the hack:
Bunnyhop Bot: Do jumps as soon as the player hits the ground to make it easier to perform bunny hop chains No Flash: Be immune to flash grenades that would block the players vision Aimbot: Automatically aim at the head of the nearest enemy Tooling &amp;amp; Setup Linux lacks of good tools to perform the kind of analysis tasks required to code a cheat like this.</description>
    </item>
    
    <item>
      <title>Bypassing ASLR and DEP for 32-Bit Binaries With r2</title>
      <link>https://bananamafia.dev/post/binary-aslr-dep-32/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/binary-aslr-dep-32/</guid>
      <description>This post covers basic basics of bypassing ASLR and DEP with r2. For this, a vulnerable application, yolo.c, is required:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; void lol(char *b) { char buffer[1337]; strcpy(buffer, b); } int main(int argc, char **argv) { lol(argv[1]); } 64-Bit vs 32-Bit Binaries The issue here should be quite obvious - strcpy blindly copies the user-controlled input buffer b into buffer which causes a buffer overflow. Since normally ASLR and DEP are enabled, the following things don&amp;rsquo;t just work out of the box:</description>
    </item>
    
    <item>
      <title>Passing binary input via GDB</title>
      <link>https://bananamafia.dev/post/rnd-092345-gdb/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/rnd-092345-gdb/</guid>
      <description>When trying to exploit an application it&amp;rsquo;s useful to send the input via gdb to immediately check how the input is being processed. But once the gdb is open it&amp;rsquo;s sometimes not clear how to pass binary input to applications reading from stdin, e.g. using read. An easy way is to start the debugging session with gdb ./binary and using
run &amp;lt; &amp;lt;(printf &amp;#34;\xAA\xAA\xAA&amp;#34;) from the gdb session to send arbitrary bytes.</description>
    </item>
    
    <item>
      <title>Car Hacking: A Short Overview</title>
      <link>https://bananamafia.dev/post/autohax/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/autohax/</guid>
      <description>Ever wondered about the various techniques that can be applied to hack modern cars? This post documents various ways to do so - you can use it as a cheatsheet
Software There are multiple ways one can interface with the software stack of a car. The easiest one is to use USB-to-Ethernet adapters in order to attach to the network of the car. It&amp;rsquo;s important to use special adapters that are whitelisted on the car&amp;rsquo;s head unit.</description>
    </item>
    
    <item>
      <title>Game Hacking #1: Developing Hacks for idTech3 Based Games</title>
      <link>https://bananamafia.dev/post/multihack/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/multihack/</guid>
      <description>The idTech3 game engine is most known for being used in games like Quake III Arena, Wolfenstein: ET and Star Wars: Jedi Knight - Jedi Academy. Sometimes people just simply refer to this engine as the Quake3 engine. This post teaches you how to create hacks for games that are based on this game engine. The target of choice is the game Jedi Academy, which was released in 2003. Oldschool, I know - but most of the injection and hooking techniques can also be applied to modern games.</description>
    </item>
    
    <item>
      <title>Game Hacking #0: Runtime Function Patching</title>
      <link>https://bananamafia.dev/post/cvar-hax/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/cvar-hax/</guid>
      <description>When it comes to patching certain functions of a binary on ASM level, it&amp;rsquo;s often performed by modifying the binary itself. This post shows a different approach to accomplish the same thing: Removing game cheat protections using runtime function patching.
The Target This is being shown in the following context: Quake3 based multiplayer games include certain settings (CVars) which are disabled for players to prevent cheating. These settings would enable clients to disable fog and shadows and use different camera angles.</description>
    </item>
    
    <item>
      <title>Cracking Music Server Software</title>
      <link>https://bananamafia.dev/post/mserver-crack/</link>
      <pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/mserver-crack/</guid>
      <description>tl;dr Generating licenses using MD5(email) is bad.
Validating licenses using HTTP in plain text is bad.
The Software This post covers reverse engineering and cracking the license validation process of a popular and closed source self hosted music server application. The developer has been notified about the findings, however no reply has been received. The validation issues still exist as of now and affects all issued licenses. Because of this, the name of the application won&amp;rsquo;t be disclosed.</description>
    </item>
    
  </channel>
</rss>
