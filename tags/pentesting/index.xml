<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pentesting on BananaMafia</title>
    <link>https://bananamafia.dev/tags/pentesting/</link>
    <description>Recent content in pentesting on BananaMafia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://bananamafia.dev/tags/pentesting/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>haxxor-tools</title>
      <link>https://bananamafia.dev/project/haxxor-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/haxxor-tools/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docker Breakout Using X11</title>
      <link>https://bananamafia.dev/post/docker-breakout/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/docker-breakout/</guid>
      <description>Use Docker to run GUI applications they said.
Mount the X11 socket they said.
Allow other users to access your X session they said.
This post covers Docker container breakouts by abusing bad security practices related to the X11 socket.
The problem To display windows spawned through a Docker container, people often launch containers following these steps:
Use -e DISPLAY=$DISPLAY to share the display variable value Specifying -v /tmp/.X11-unix:/tmp/.X11-unix:ro shares the X11 socket - optionally as read only.</description>
    </item>
    
    <item>
      <title>Methods to Upgrade nc Reverse Shells</title>
      <link>https://bananamafia.dev/post/shell-upgrade/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/shell-upgrade/</guid>
      <description>Ended up with a cheap nc shell and want to upgrade to a &amp;ldquo;real&amp;rdquo; shell with a proper TTY and navigation?
Say no more &amp;lt;:
1. Upgrading using shell magic This doesn&amp;rsquo;t always work - however if Python is present on the victims machine, it&amp;rsquo;s worth a try.
Use bash on the attacker machine, zsh doesn&amp;rsquo;t seem to work. Get the nc shell. In the shell, execute: python -c &amp;#39;import pty; pty.</description>
    </item>
    
    <item>
      <title>2 Common Python Security Issues</title>
      <link>https://bananamafia.dev/post/python-hax/</link>
      <pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/python-hax/</guid>
      <description>tl;dr Be aware that imports can be hijacked for Python2 and Python3 - take care of EUIDs.
Don&amp;rsquo;t use input() for Python2.x.
Module Hijacking When assigning SUID bits to Python scripts, privileges can be escalated easily. Consider the following Python source code:
#!/usr/bin/python2.7 # -*- coding: utf-8 -*- import hashlib value = raw_input() md5 = hashlib.md5() md5.update(value) print md5.digest() Note that in case of SUID binaries this code runs as root.</description>
    </item>
    
  </channel>
</rss>
