<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>exploitation on BananaMafia</title>
    <link>https://bananamafia.dev/tags/exploitation/</link>
    <description>Recent content in exploitation on BananaMafia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://bananamafia.dev/tags/exploitation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SROP Exploitation with radare2</title>
      <link>https://bananamafia.dev/post/srop/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/srop/</guid>
      <description>Recently I&amp;rsquo;ve discovered a paper that demonstrates a fancy ROP-style exploitation technique for Linux based systems. It&amp;rsquo;s called Sigreturn-oriented programming (SROP) and was released by two students of the university of Amsterdam in 2014. This post contains background information on this exploitation technique and shows how to pull it off using radare2 and pwntools.
Sigreturn-Oriented Programming The cool thing about this technique is that only one or two gadgets are required in order to get control over all registers of the target process.</description>
    </item>
    
    <item>
      <title>ROP on ARM with radare2</title>
      <link>https://bananamafia.dev/post/rop-arm-1/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/rop-arm-1/</guid>
      <description>Exploit development on ARM with radare2 seems like a great idea until you start searching for resources, searching for a nice and automated debugging setup. Here&amp;rsquo;s what I&amp;rsquo;ve found:
nothing
Cool. That&amp;rsquo;s the reason why this post covers the setup I came up with, as well as basics for ROP on the ARM architecture. The exploit target is stack6 from Azeria Labs and radare2 will be used as a debugger. If you&amp;rsquo;re a beginner I suggest reading the ARM assembly basics on the same site first before starting the challenges from the beginning with stack0.</description>
    </item>
    
  </channel>
</rss>